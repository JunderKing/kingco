### MySQL必知必会
• Basic command
• Backup and restore
• SELECT
    • select from where group by having order by limit
    • from -> join -> on -> where -> group by -> having -> select -> order by ->limit
    • SELECT
        • SELECT [DISTINCT] $field [, $field2 ...]
        • DISTINCT作用于所有列出的字段，过滤掉所有列出字段都相同的数据
        • $field可以使用$table.$field
        • 数据库完成格式化操作比客户端快很多
        • $field1 +、-、*、/ $field2 AS $alias
        • 文本处理函数
            • TRIM($field)/LTRIM($field)/RTRIM($field) | 去掉空格
            • CONCAT($field1, $str, ...)
            • LEFT() => , RIGHT() => 
            • UPPER() => ,LOWER() => 
            • LOCATE() => 
            • SOUNDEX() => 按发音搜索
            • SUBSTRING() =>
        • 日期和时间处理函数
            • AddDate(), AddTime(), CurData(), CurTime()
            • DateDiff(), Date_Add(), Data_Fromat()
            • Date(), Time(), Year(), Month(), DayOfWeek(), Day(), Hour(), Minute(), Second()
            • Now()
            • 日期格式必须为'yyyy-mm-dd'; Date($datetime) = 'yyyy-mm-dd'
        • 数值处理函数
            • Abs(), Cos(), Exp(), Mod(), Pi(), Rand(), Sin(), Sqrt(), Tan()
        • 聚集函数
            • AVG(), COUNT(), MAX(), MIN(), SUM(), 标准偏差聚集函数(略)
            • 参数可以是字段，也可以是表达式
            • 聚集函数高效设计，比客户端计算快得多
            • AVG($field)只能用于单列，忽略值为null的行
            • COUNT(*)计数行，无论是否为null；COUNT($field)忽略null
            • MAX($field)返回最大数值或者日期值，文本则排序后返回最后一列；忽略null
            • MIN($field)同max
            • SUM($field)忽略null
            • FUNC([DISTINCT] $field)
                • DISTINCT不能用于COUNT(*)
                • DISTINCT必须接列名，不能用表达式
    • FROM
        • FROM $table，可以使用$db.$table
        • 可以使用表别名$table AS $alias
    • JOIN
        • 内部联结(等值联结)
            • SELECT * FROM $table1, $table2 WHERE $table1.$field1=$table2.$field2
            • SELECT * FROM $table1 INNER JOIN $table2 ON $table1.$field1=$table2.$field2
            • 推荐使用INNER JOIN
            • 未指定联结条件会返回笛卡尔积
        • 自联结
            • 查看某一产品生产商生产的其它产品
            • 有时候联结远比子查询快得多，应该测试两种方式
            • 联结字段值相同则以笛卡尔积的方式构建中间表？
        • 自然联结
            • 标准联结有的字段重复出现，自然联结自己选择字段，使其不重复
            • 基本不会使用非自然联结
        • 外部联结
            • LEFT/RIGHT OURTER JOIN $table ON
            • LEFT表示包含JOIN左边表的所有列，RIGHT指右边
            • 包含未被关联的列
    • WHERE
        • =/<>/!=/</<=/>/>=/BETWEEN AND/IS NULL
            • BETWEEN包括起始和结束值
            • 字符串需要用单引号包围
            • 匹配是不区分大小写
        • AND/OR
            • 先处理AND，后处理OR
            • 可以用()分组，任何时候都应该使用
        • IN
            • IN (value1, value2, ...)/(SELECT ...)
            • IN比OR执行更快
        • 子查询
            • IN/<>/= (SELECT ...)
            • SELECT $field1, (SELECT COUNT(*) ...) FROM ...
        • NOT
            • NOT IN/BETWEEN/EXISTS
        • LIKE
            • 字符串需要用单引号包围
            • 通配符比其它搜索慢，尽量不要放在搜索模式开头
            • 匹配整个字段，即默认带开头和结尾符/^$/
            • %
                • 任意字符串出现任意次数（包括0次），不匹配null
                • 搜索是否区分大小写取决于mysql的配置
            • _
                • 任意字符出现一次
        • REGEXP
            • 只支持多数正则表达式的一个很小的子集
            • 默认不区分大小写，若需区分大小写使用REGEXP BINARY
            • . => 任意字符, | => 或, [] => 多个字符中的一个, [^] => 取反, [a-z] => 范围, \\ => 转义
            • \\f => 换页, \\n => 换行, \\r => 回车, \\t => 制表, \\v纵向制表
            • * => 0次或多次, + => 1次或多次, ? => 0次或1次, {n} => n次, {n,} => n次或以上, {n, m} => 大于等于n次且小于等于m次
            • ^ => 文本开头, $ => 文本结尾, [[:<:]] => 词开头, [[:>:]] => 词结尾
    • GROUP BY
        • GROUP BY $field[, $field2 ...] [WITH ROLLUP]
        • $field可以是表达式，不能是聚集函数
        • 如果在SELECT中使用表达式，则必须在GROUP BY中指定相同的表达式且不能用别名
        • 除聚集函数外，SELECT中的每个字段都必须在GROUP BY中给出
        • NULL值将作被分为一组
        • 必须在WHERE之后，ORDER BY之前
        • 使用WITH ROLLUP可以得到每个分组以及每个分组汇总级别
        • 和ORDER BY的异同
    • HAVING
        • 同WHERE，包括通配符条件和多个操作符子句
        • WHERE排除的行不在分组中
        • 可以使用聚集函数
    • ORDER BY
        • ORDER BY $field [DESC] [, $field2 [DESC] ...]
        • 可以通过非查询field排序
        • 按多个字段排序时，先按第一个字段排序，第一个字段相同的行再按第二个字段排序，以此类推
        • DESC至作用于其前面的字段，默认是ASC
        • 排序默认不区分大小写，若更改，需要更改数据库设置
        • 必须是SELECT子句的最后一条，位于LIMIT之前
    • LIMIT
        • LIMIT [$offset, ]$limit
        • 跳过$offset行后，返回最多$limit条数据
        • LIMIT $limit OFFSET $offset
    • UNION
        • $sql1 UNION $sql2
        • 多条WHERE语句可以用UNION代替，性能差异需要测试
        • 每个查询必须包含相同的字段，顺序可以不同
        • 字段数据类型必须可隐式转换，如不同的数字类型或日期类型
        • 默认去除重复的行，UNION ALL不去重
        • 只能在最后一条语句使用一条ORDER BY语句，对整个结果集排序
        • 可以组合不同的表
    • 全文本搜索
        • MyISAM支持全文本搜索，InnoDB不支持
        • 通配符和正则表达式会尝试匹配所有行，因此行数增加导致耗时
        • 必须索引被搜索的列，CREATE TABLE时FULLTEXT($field)
        • 先导入数据再建FULLTEXT索引
        • WHERE Match($field) Against('word')
        • $field必须和FULLTEXT($field)中$field相同
        • 除非使用BINARY方式，否则不区分大小写
        • 全文本搜索对结果按匹配等级排序
        • SELECT Match($field) Against('word') AS rank列出匹配等级
        • 忽略词中的单引号
        • 查询扩展
            • 可以找出可能相关的结果，即使并不精确包含被查找的词
            • 全文本搜索=>匹配行中选择有用的次=>原条件+有用的次再一次全文本搜索
            • WHERE Match($field) Against('word' WITH QUERY EXPANSION)
        • 布尔文本搜索
            • 即使没有FULLTEXT索引也可以使用
            • 性能将随着数据量增加而降低
            • Against('word1 -word2*' IN BOOLEAN MODE)
            • +、-、>、<、()、~、*、""
    • select [distinct] FIELD,[FIELD2,...] from TABLE order by FIELD [DESC] [,FIELD2 [DESC]] limit [OFFSET,]NUM
• INSERT
    • INSERT INTO $talbe($field ...) VALUES($value ...)[, ($value ...)]
    • 单条INSERT语句比多条语句快
    • 省略的字段要么可以为null，要么有默认值
    • INSERT操作可能很耗时，特别是有很多索引要更新
    • INSERT LOW_PRIORITY INTO降低INSERT语句优先级，适用于UPDATE和DELETE
    • INSERT INTO $table($field ...) SELECT($field ...) FROM ...
    • INSERT SELECT不关心列名，对应插入
• UPDATE
    • UPDATE $table SET $field=$value[, $field2=$value2] WHERE $condition
    • 如果没有where语句，则更新所有行
    • 可以使用SELECT检索出的数据更新列数据
    • UPDATE IGNORE插入多行时如果某一行有错误，继续更新，否则整个UPDATE被取消
• DELETE
    • DELETE FROM $table WHERE $condition
    • 如果没有WHERE语句，则删除所有行
    • TRUNCATE TABLE删除原来的表并重新创建一个，比DELETE快
    • Mysql没有撤销按钮！
• 视图
    • 视图不包含数据，包含的是sql查询，是Mysql语句层次的封装
    • 性能需要测试
    • 可用来重新格式化数据
    • 命名唯一，不能和其它视图或表重复
    • 使用视图的sql语句中ORDER BY会覆盖视图里的ORDER BY
    • 视图不能索引，不能有关联的触发器或默认值
    • 可以联结视图和表
    • CREATE VIEW $viewname AS SELECT ...=> 创建视图
    • SHOW CREATE VIEW $viewname => 查看视图语句
    • CREATE OR REPLACE VIEW => 更新视图
    • 可以用INSERT/UPDATE/DELETE
    • 不能更新的视图：分组/联结/子查询/并/聚集函数/DISTINCT/导出列
    • 视图一般用于SELECT语句
• 存储过程
    • 需要Mysql5, 简单、安全、高性能
    • 相当于批处理
    • 使用存储过程比使用单独的sql语句快
    • 创建存储过程
        • CREATE PROCEDURE $name ([ IN/OUT $paramName $type, ])
            • IN => 传递给存储过程的数据，OUT => 需要传出的数据 -> INTO $paraName
        • BEGIN
            • SELECT $paramName...;
        • END;
    • 执行存储过程
        • CALL $name(@$param, );
    • 删除存储过程
        • DROP PROCEDURE [IF EXISTS] $name;
    • 显示数据
        • SELECT @$param
    • 查看存储过程
        • SHOW CREATE PROCEDURE $procedureName
        • SHOW PROCEDURE STATUS => 查看所有存储过程
• 游标
    • 需要Mysql5, 只能用于存储过程
    • 创建游标
        • DECLARE $cursorName CURSOR FRO SELECT ...
    • 打开和关闭游标
        • OPEN $cursorName;
            • 声明过的游标不需要再次声明就可以打开
        • CLOSE $cursorName;
            • CLOSE释放游标使用的内存和资源，不需要时都应该关闭
            • 如果没有关闭，Mysql在END语句时关闭
    • 使用游标数据
        • FETCH $field INTO $paramName
• 触发器
    • 需要Mysql5
    • 响应：DELETE/INSERT/UPDATE
    • 每个表最多6个触发器
    • 不支持视图和临时表
    • 创建触发器
        • CREATE TRIGGER $triggerName
        • AFTER INSERT ON $table
        • FOR EACH ROW SELECT ...
    • 删除触发器
        • DROP TRIGGER $triggerName;
• 事务处理
    • MyISAM不支持，InnoDB支持
    • 开始事务 => START TRANSACTION
    • 保留点 => SAVEPOINT $point
    • 回退 => ROLLBACK [TO $point];
        • 无法回退SELECT/CREATE/DROP
    • 提交 => COMMIT;
        • 必须明确提交
        • 只在不出错的时候提交
    • COMMIT或ROLLBACK执行后，事务会自动关闭
• 全球化和本地化
    • 字符集 => 字母和符号的集合
    • 编码 => 某个字符集成员的内部表示
    • 校对 => 规定字符如何比较的指令
    • SHOW CHARACTER SET; | 查看支持的字符集列表
    • SHOW COLLATION; | 查看支持的校对列表
    • 在创建表时指定字符集
        • CREATE TABLE ...
        • DEFAULT CHARACTER SET $charset
        • COLLATE $collate
    • 为列指定字符集
        • $field $type ... CHARACTER SET $charset COLLATE $collate
    • 临时区分大小写
        • SELECT ... ORDER BY $field COLLATE $collate;
• 安全管理
    • 访问控制
    • 获取所有用户列表
        • USE mysql;
        • SELECT user FROM user;
    • 创建用户账号
        • CREATE USER $userName IDENTIFIED BY '$passwd';
    • 重命名账号
        • RENAME USER $userName TO $newName 需要Mysql5
    • 更改密码
        • SET PASSWORD [FRO $userName] = Password('$passwd')
        • 未指定用户名则更新当前登录的用户密码
    • 查看用户权限
        • SHOW GRANTS FOR $userName
    • 授予权限
        • GRNAT $previlege[, $previlege2] ON $db.$table TO $userName
    • 撤销权限
        • REVOKE $previlege ON $db.$table FROM $userName
• 数据库维护
    • 备份数据库
        • FLUSH TABLES保证所有数据都被写到磁盘
        • mysqldump
        • mysqlhotcopy
        • BACKUP TABLE -> RESTORE TABLE
        • SELECT INTO OUTFILE
• 改善性能
    • SHOW PROCESSLIST查看所有活动进程和执行时间
    • 试验联结、并、子查询，找出最佳方法
    • 存储过程执行比分别执行每条语句快
    • 决不要检索比需求还要多的数据，即尽量不用SELECT *
    • 删除索引=>导入索引=>重建索引
    • 执行慢的SELECT语句所使用的$field需要建立索引
    • UNION语句比WHERE OR快得多
    • 索引提高查询数据，降低INSERT/DELETE/UPDATE性能
    • LIKE很慢，使用FULLTEXT代替
    • 所有规则在特定条件下都会被打破
